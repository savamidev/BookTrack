name: Registrar Usuario

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Nombre del usuario'
        required: true
      surname:
        description: 'Apellidos del usuario'
        required: true
      birthdate:
        description: 'Fecha de nacimiento (DD/MM/AAAA)'
        required: true
      email:
        description: 'Correo electr√≥nico'
        required: true
      notifications:
        description: 'Aceptar notificaciones (S√≠/No)'
        required: true

jobs:
  register-user:
    runs-on: ubuntu-latest

    steps:
      # 1. Descargar el repositorio
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      # 2. Generar una ID corta y √∫nica (3 d√≠gitos)
      - name: Generar ID corto
        id: generate-id
        run: |
          user_id=$(openssl rand -base64 2 | tr -dc '0-9a-zA-Z' | cut -c1-3)  # ID de 3 caracteres
          echo "user_id=$user_id" >> $GITHUB_ENV

      # 3. Crear la carpeta personal para el usuario con nombre y ID
      - name: Crear carpeta personal para el usuario
        run: |
          user_dir="Usuarios/${{ github.event.inputs.name }}_$user_id"
          user_dir=${user_dir// /_}  # Reemplazar espacios por guiones bajos
          mkdir -p "$user_dir"  # Crear la carpeta del usuario si no existe

      # 4. Guardar los datos del usuario en `users.json`
      - name: Guardar los datos del usuario en `users.json`
        run: |
          user_data=$(jq -n \
            --arg id "$user_id" \
            --arg name "${{ github.event.inputs.name }}" \
            --arg surname "${{ github.event.inputs.surname }}" \
            --arg birthdate "${{ github.event.inputs.birthdate }}" \
            --arg email "${{ github.event.inputs.email }}" \
            --arg notifications "${{ github.event.inputs.notifications }}" \
            '{id: $id, name: $name, surname: $surname, birthdate: $birthdate, email: $email, notifications: $notifications}')

          # Verificar si `users.json` ya existe, si es as√≠, agregar el nuevo usuario
          if [ -f Usuarios/users.json ]; then
            jq --argjson new_user "$user_data" '.users += [$new_user]' Usuarios/users.json > temp.json && mv temp.json Usuarios/users.json
          else
            # Si `users.json` no existe, crear uno nuevo
            echo '{"users":['"$user_data"']}' > Usuarios/users.json
          fi

      # 5. Crear el README.md personalizado dentro de la carpeta del usuario
      - name: Crear README.md personal para el usuario
        run: |
          user_dir="Usuarios/${{ github.event.inputs.name }}_$user_id"
          user_dir=${user_dir// /_}  # Reemplazar espacios por guiones bajos
          user_readme="$user_dir/README.md"

          echo "# üåü Bienvenido a tu perfil, **${{ github.event.inputs.name }}**!" > "$user_readme"
          echo "¬°Felicidades! üéâ Has creado tu perfil personal en nuestro sistema. Aqu√≠ puedes encontrar todos los detalles sobre ti mismo." >> "$user_readme"
          echo "---" >> "$user_readme"
          echo "" >> "$user_readme"
          echo "## üìù **Tus Datos**" >> "$user_readme"
          echo "- **Nombre completo**: **${{ github.event.inputs.name }} ${{ github.event.inputs.surname }}**" >> "$user_readme"
          echo "- **ID √∫nico**: \`**$user_id**\`" >> "$user_readme"
          echo "- **Fecha de nacimiento**: **${{ github.event.inputs.birthdate }}**" >> "$user_readme"
          echo "- **Correo electr√≥nico**: **${{ github.event.inputs.email }}**" >> "$user_readme"
          echo "- **Notificaciones**: **${{ github.event.inputs.notifications }}**" >> "$user_readme"
          echo "---" >> "$user_readme"
          echo "" >> "$user_readme"
          echo "## üå± **¬øQu√© puedes hacer ahora?**" >> "$user_readme"
          echo "- Personaliza tu perfil agregando una biograf√≠a o tus intereses." >> "$user_readme"
          echo "- Conecta tu cuenta con otros servicios o aplicaciones." >> "$user_readme"
          echo "- Comparte tus logros o actividades." >> "$user_readme"
          echo "---" >> "$user_readme"
          echo "" >> "$user_readme"
          echo "## üí¨ **Con√©ctate con la comunidad**:" >> "$user_readme"
          echo "Si tienes alguna pregunta o sugerencia, no dudes en contactarnos. ¬°Estamos aqu√≠ para ayudarte!" >> "$user_readme"
          echo "---" >> "$user_readme"
          echo "" >> "$user_readme"
          echo "## üìÖ **Detalles importantes**:" >> "$user_readme"
          echo "- **Fecha de creaci√≥n**: *Fecha actual del sistema*" >> "$user_readme"
          echo "---" >> "$user_readme"
          echo "" >> "$user_readme"
          echo "### **¬°Gracias por registrarte y bienvenido a bordo!** üöÄ" >> "$user_readme"

      # 6. Crear o actualizar el README.md global con la lista de usuarios
      - name: Crear o actualizar README.md global
        run: |
          README="Usuarios/README.md"

          # Si el archivo README.md no existe, crearlo
          if [ ! -f "$README" ]; then
            echo "# üìö **Lista de Usuarios Registrados**" > "$README"
            echo "" >> "$README"
          fi

          # A√±adir el nuevo usuario al README.md
          echo "## ${{ github.event.inputs.name }} ${{ github.event.inputs.surname }}" >> $README
          echo "- **ID √∫nico**: $user_id" >> $README
          echo "- **Correo electr√≥nico**: ${{ github.event.inputs.email }}" >> $README
          echo "" >> $README

      # 7. Eliminar archivos rastreados pero eliminados f√≠sicamente
      - name: Eliminar archivos rastreados pero eliminados f√≠sicamente
        run: |
          git rm --cached "Usuarios/Miguel_S√°nchez V√°zquez/README.md"
          git commit -m "Eliminar archivo README.md rastreado pero eliminado"

      # 8. Limpiar √≠ndice Git
      - name: Limpiar √≠ndice Git
        run: |
          git filter-branch --force --index-filter \
            'git rm -r --cached --ignore-unmatch "Usuarios/Miguel_S√°nchez V√°zquez/README.md"' \
            --prune-empty --tag-name-filter cat -- --all

      # 9. Actualizar .gitignore
      - name: Actualizar .gitignore
        run: |
          echo "Usuarios/*_V√°zquez/*" >> .gitignore
          git add .gitignore
          git commit -m "Actualizar .gitignore para evitar rastrear carpetas con V√°zquez"

      # 10. Commit y push de los cambios
      - name: Commit y push de los cambios
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # A√±adir todos los archivos modificados
          git add "Usuarios/users.json" "Usuarios/README.md"
          
          # Generar el mensaje de commit din√°micamente
          commit_message="Actualizar estructura de usuarios y limpiar √≠ndice Git"
          git commit -m "$commit_message"

          # Realizar el push con el token de autenticaci√≥n
          git push origin main --force
