name: Registrar Libro

on:
  workflow_dispatch:
    inputs:
      book_title:
        description: 'Título del libro'
        required: true
      book_author:
        description: 'Autor del libro'
        required: true
      book_status:
        description: 'Estado del libro'
        required: true
        type: choice
        options:
          - "Leyendo"
          - "Pendiente"
          - "Terminado"
      book_favorite:
        description: '¿Es tu libro favorito?'
        required: true
        type: choice
        options:
          - "Si"
          - "No"
      book_type:
        description: 'Tipo de libro (ej. Terror, Fantasía, etc.)'
        required: true
        type: choice
        options:
          - "Terror"
          - "Fantasía"
          - "Ciencia Ficción"
          - "Misterio"
          - "Aventura"
          - "Romántico"
      user_id:
        description: 'Ingresa el ID del usuario (Diferencias entre mayúsculas y minúsculas)'
        required: true
        type: string  # Campo de texto para ingresar la ID del usuario

jobs:
  register-book:
    runs-on: ubuntu-latest

    steps:
      # 1. Descargar el repositorio
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      # 2. Leer el archivo `users.json` desde la carpeta `Usuarios/` para obtener la información del usuario
      - name: Leer usuarios de users.json
        id: read_users
        run: |
          # Leer el archivo `Usuarios/users.json` y obtener la información del usuario por su ID
          USERS=$(jq -r '.users[] | select(.id == "${{ github.event.inputs.user_id }}")' Usuarios/users.json)
          USER_NAME=$(echo "$USERS" | jq -r '.name')
          USER_SURNAME=$(echo "$USERS" | jq -r '.surname')
          USER_EMAIL=$(echo "$USERS" | jq -r '.email')
          echo "user_name=$USER_NAME" >> $GITHUB_ENV
          echo "user_surname=$USER_SURNAME" >> $GITHUB_ENV
          echo "user_email=$USER_EMAIL" >> $GITHUB_ENV

      # 3. Convertir la ID de usuario a mayúsculas
      - name: Convertir el ID de usuario a mayúsculas
        id: convert_id
        run: |
          # Convertir el ID de usuario a mayúsculas
          user_id_upper=$(echo "${{ github.event.inputs.user_id }}" | tr 'a-z' 'A-Z')
          echo "user_id_upper=$user_id_upper" >> $GITHUB_ENV

      # 4. Registrar el libro con la ID del usuario en mayúsculas y tipo de libro
      - name: Registrar el libro con la ID del usuario
        run: |
          # Crear el objeto del libro con los datos proporcionados
          book_data=$(jq -n \
            --arg title "${{ github.event.inputs.book_title }}" \
            --arg author "${{ github.event.inputs.book_author }}" \
            --arg status "${{ github.event.inputs.book_status }}" \
            --arg favorite "${{ github.event.inputs.book_favorite }}" \
            --arg book_type "${{ github.event.inputs.book_type }}" \
            --arg user_id "${{ env.user_id_upper }}" \
            '{title: $title, author: $author, status: $status, favorite: $favorite, type: $book_type, user_id: $user_id}')

          # Selección de archivo basado en el estado del libro
          case "${{ github.event.inputs.book_status }}" in
            Leyendo)
              target_file="Libros/en_lectura.json"
              ;;
            Pendiente)
              target_file="Libros/pendientes.json"
              ;;
            Terminado)
              target_file="Libros/acabados.json"
              ;;
            *)
              echo "Estado no válido, el libro no será registrado."
              exit 1
              ;;
          esac

          # Agregar el libro al archivo correspondiente
          if [ -f "$target_file" ]; then
            jq --argjson new_book "$book_data" '.books += [$new_book]' "$target_file" > temp.json && mv temp.json "$target_file"
          else
            # Si no existe, crear el archivo correspondiente
            echo '{"books":['"$book_data"']}' > "$target_file"
          fi

          # También agregar el libro en books.json
          books_json="Libros/books.json"
          if [ -f "$books_json" ]; then
            jq --argjson new_book "$book_data" '.books += [$new_book]' "$books_json" > temp.json && mv temp.json "$books_json"
          else
            # Si no existe, crear el archivo books.json
            echo '{"books":['"$book_data"']}' > "$books_json"
          fi

      # 5. Verificar si el directorio Libros existe y crear el README.md
      - name: Verificar y crear README.md en Libros
        run: |
          # Verificar si el directorio Libros existe
          if [ ! -d "Libros" ]; then
            mkdir Libros
          fi

          LIBROS_README="Libros/README.md"
          if [ ! -f "$LIBROS_README" ]; then
            echo "# 📚 Información de Libros Registrados" > "$LIBROS_README"
            echo "" >> "$LIBROS_README"
          fi
          # Añadir el libro al README de Libros
          echo "## Título: ${{ github.event.inputs.book_title }}" >> "$LIBROS_README"
          echo "- **Autor**: ${{ github.event.inputs.book_author }}" >> "$LIBROS_README"
          echo "- **Estado**: ${{ github.event.inputs.book_status }}" >> "$LIBROS_README"
          echo "- **Favorito**: ${{ github.event.inputs.book_favorite }}" >> "$LIBROS_README"
          echo "- **Tipo**: ${{ github.event.inputs.book_type }}" >> "$LIBROS_README"
          echo "" >> "$LIBROS_README"

      # 6. Acceder a la carpeta personal del usuario usando el nombre (nombre_id)
      - name: Actualizar el README.md del usuario
        run: |
          # Construir el nombre de la carpeta del usuario
          USER_DIR="Usuarios/${{ env.user_name }}_${{ env.user_id }}"
          USER_README="$USER_DIR/README.md"
          
          # Verificar si la carpeta del usuario existe
          if [ ! -d "$USER_DIR" ]; then
            echo "La carpeta del usuario no existe."
            exit 1
          fi

          # Verificar si el archivo README.md del usuario existe
          if [ ! -f "$USER_README" ]; then
            echo "# 📚 Perfil de ${{ env.user_name }} ${{ env.user_surname }}" > "$USER_README"
            echo "" >> "$USER_README"
            echo "- **Correo electrónico**: ${{ env.user_email }}" >> "$USER_README"
            echo "" >> "$USER_README"
          fi
          
          # Añadir el libro al README del usuario
          echo "## Libro Añadido: ${{ github.event.inputs.book_title }}" >> "$USER_README"
          echo "- **Autor**: ${{ github.event.inputs.book_author }}" >> "$USER_README"
          echo "- **Estado**: ${{ github.event.inputs.book_status }}" >> "$USER_README"
          echo "- **Favorito**: ${{ github.event.inputs.book_favorite }}" >> "$USER_README"
          echo "- **Tipo**: ${{ github.event.inputs.book_type }}" >> "$USER_README"
          echo "" >> "$USER_README"

      # 7. Hacer commit y push de los cambios
      - name: Commit y push de los cambios
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Añadir los archivos modificados
          git add Libros/books.json Libros/README.md "Usuarios/${{ env.user_name }}_${{ env.user_surname }}/README.md"

          # Commit con mensaje dinámico
          git commit -m "Registrar libro: ${{ github.event.inputs.book_title }} con ID de usuario ${{ env.user_id_upper }}"

          # Push con el token de autenticación
          git push
