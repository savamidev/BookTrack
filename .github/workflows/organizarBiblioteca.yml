name: Organizar Biblioteca por Tipo

on:
  push:
    paths:
      - 'Biblioteca/biblio.json'  # Activar flujo solo si este archivo se modifica

jobs:
  organize-library:
    runs-on: ubuntu-latest

    steps:
      # 1. Descargar el repositorio
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      # 2. Limpiar y validar biblio.json
      - name: Limpiar y validar biblio.json
        run: |
          BIBLIOTECA_JSON="Biblioteca/biblio.json"
          
          # Verificar si el archivo JSON existe
          if [ ! -f "$BIBLIOTECA_JSON" ]; then
            echo "El archivo $BIBLIOTECA_JSON no existe."
            exit 1
          fi

          # Mostrar el contenido del archivo JSON para depuraci칩n
          echo "Contenido de biblio.json:"
          cat "$BIBLIOTECA_JSON"

          # Asegurarse de que no haya caracteres extra침os o de retorno de carro
          echo "Limpiando el archivo JSON para eliminar caracteres no visibles..."
          cat "$BIBLIOTECA_JSON" | tr -d '\r' > Biblioteca/biblio_clean.json

          # Verificar que el archivo limpio sea un JSON v치lido
          if ! jq empty Biblioteca/biblio_clean.json > /dev/null; then
            echo "Error: El archivo biblio_clean.json tiene un formato inv치lido."
            # Intentar mostrar el error de jq para que se pueda depurar
            jq . Biblioteca/biblio_clean.json
            exit 1
          fi
          echo "El archivo biblio_clean.json es v치lido."

      # 3. Leer y procesar biblio_clean.json
      - name: Crear carpetas y actualizar README.md
        run: |
          BIBLIOTECA_JSON="Biblioteca/biblio_clean.json"  # Usar el archivo limpio para evitar errores
          
          # Leer los tipos 칰nicos de libros
          types=$(jq -r '.books[].type' "$BIBLIOTECA_JSON" | sort | uniq)

          # Procesar cada tipo de libro
          for type in $types; do
            # Crear la carpeta para cada tipo si no existe
            type_dir="Libros/$type"
            mkdir -p "$type_dir"

            # Ruta al README.md dentro de la carpeta
            readme="$type_dir/README.md"

            # Crear o modificar el README.md
            if [ ! -f "$readme" ]; then
              echo "# 游닄 Libros de $type" > "$readme"
              echo "Bienvenido a la colecci칩n de libros de **$type**. Aqu칤 encontrar치s los libros clasificados por este g칠nero." >> "$readme"
              echo "---" >> "$readme"
              echo "" >> "$readme"
            fi

            # A침adir libros al README.md
            books=$(jq -c ".books[] | select(.type==\"$type\")" "$BIBLIOTECA_JSON")
            for book in $books; do
              title=$(echo "$book" | jq -r '.title')
              author=$(echo "$book" | jq -r '.author')
              status=$(echo "$book" | jq -r '.status')
              favorite=$(echo "$book" | jq -r '.favorite')

              # Verificar si el libro ya est치 en el README
              if ! grep -q "## $title" "$readme"; then
                echo "## $title" >> "$readme"
                echo "- **Autor**: $author" >> "$readme"
                echo "- **Estado**: $status" >> "$readme"
                echo "- **Favorito**: $favorite" >> "$readme"
                echo "" >> "$readme"
                echo "### Comentarios" >> "$readme"
                echo "> A침ade aqu칤 tus comentarios sobre este libro." >> "$readme"
                echo "---" >> "$readme"
                echo "" >> "$readme"
              fi
            done
          done

      # 4. Hacer commit y push de los cambios
      - name: Commit y push de los cambios
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add Libros/
          git commit -m "Organizar biblioteca por tipo y actualizar README.md de libros" || echo "No hay cambios para commitear."
          git push
